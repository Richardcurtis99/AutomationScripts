/////////////////////////////////////////////////////////////////////////////////// Richard Curtis CC - Automation scripting functions/////////////////////////////////////////////////////////////////////////////////$.writeln("RC Functions Loaded");// Helper Functionsfunction isOSX(){    return $.os.match(/Macintosh/i);}///////////////////////////////////////////////////////////////////////////////// getAttributes- Get attributes from the XML nodes in the XFL file///////////////////////////////////////////////////////////////////////////////function getAttributes(xml_node_str) {  // select the start tag <elem >  var reg_exp = /<[^>]*>/;  var start_tag_str = reg_exp.exec(xml_node_str);  // extract the attributes  reg_exp = /[^"\s]*="[^"]*"/g;  var result;  var attributes = [];  while ((result = reg_exp.exec(start_tag_str)) !== null) {    // the attribute (name="value")    var attr = result[0];    // array containing name and "value"    var attr_arr = attr.split('=');    // delete the "'s    attr_arr[1] = attr_arr[1].substr(1, attr_arr[1].length - 2);    attributes.push(attr_arr);  }  return attributes;}    ///////////////////////////////////////////////////////////////////////////////// IsFileOneOfThese- File files of a certain extension type // This function will go and look in a file name to see if it can find the extension supplied.// i.e. ai = Illustrstor file.///////////////////////////////////////////////////////////////////////////////function IsFileOneOfThese( inFileName, inArrayOfFileExtensions ) {	var lastDot = inFileName.toString().lastIndexOf( "." );	if ( lastDot == -1 ) {		return false;	}	var strLength = inFileName.toString().length;	var extension = inFileName.toString().substr( lastDot + 1, strLength - lastDot );	extension = extension.toLowerCase();	for (var i = 0; i < inArrayOfFileExtensions.length; i++ ) {		if ( extension == inArrayOfFileExtensions[i] ) {			return true;		}	}return false;}///////////////////////////////////////////////////////////////////////////////// getRelativePath- The purpose of the script is that it can be run from a shared folder on Creative CLoud, this function will get the local relative folder on the operators system///////////////////////////////////////////////////////////////////////////////function getRelativePath() {        // We need everything to come from where the CSV / Script is run from, so this gets the relative path and works out where things need to be        // this means that the script can be distributed via Crestive Cloud and anyone can run it and then use the Sync machinsm to get it to people that need the final output at any time        var ScriptFilePath = Folder($.fileName).parent.fsName ;         $.write("Current Folder"+Folder($.fileName).parent.fsName);        var splitFolder=Folder($.fileName).parent.fsName.split("/");        $.write(splitFolder.length);        var baseLoc="";        for (i=0;i<splitFolder.length-3;i++) {            baseLoc=baseLoc+splitFolder[i]+"/";        }       return baseLoc;    }///////////////////////////////////////////////////////////////////////////////// overWriteFile- Overwrite File///////////////////////////////////////////////////////////////////////////////function overWriteFile(fileName, dataToWrite) {    var myFile=new File(fileName);                        myFile.open("w");    var data = myFile.read();    myFile.encoding = "UTF-8";    myFile.lineFeed = "Unix";    myFile.writeln(dataToWrite);    myFile.close();}///////////////////////////////////////////////////////////////////////////////// changeNodeValues- Change node vales in defined file///////////////////////////////////////////////////////////////////////////////changeNodeValues = function(documentToUpdate, node,chgToValue, setnamespace, saveChgFile) {                // set XFL Namespace         //       var ns =new Namespace("http://ns.adobe.com/xfl/2008/");                var fileIn = File(documentToUpdate);                //$.writeln("doc update=" + documentToUpdate);                var ns =new Namespace(setnamespace);                        default xml namespace = ns;                fileIn.open("r");                  var xmlString = fileIn.read();                 // fileIn.encoding = "UTF8";                var myXML = new XML(xmlString);                 $.writeln("myXML"+node+".toXMLString()");                var nodeXMLString = eval("myXML"+node+".toXMLString()");                var attributes = getAttributes(eval("myXML"+node+".toXMLString()"));                // process main node if                 //  Process main node                 // only create main node on first pass.                //              $.writeln("current value="+eval ("myXML"+node));                                //check for return                 var xx = createNewLines(chgToValue,":");                var spcChgToValue=new XML(xx);                //$.writeln("myXML"+node+" = '"+spcChgToValue.toString()+"'");                var x = "'myXML"+node+"=spcChgToValue'";                                delete(eval('myXML'+node+'.characters'));                                 eval('myXML'+node+'.characters = spcChgToValue');                                                $.writeln("here");                for (i=0;i<attributes.length;i++) {                        $.writeln("attributes[i][0] = " +attributes[i][0]);                         $.writeln("attributes[i][0] = " +attributes[i][1]);                         $.writeln("element name="+attributes[i][0]);                                         // dont process Name Space Elements, as these are passed down from the root node                      if (attributes[i][0] != "xmlns" && attributes[i][0]!="xmlns:xsi") {                        alert("myXML.folders"+node+".@"+attributes[i][0]+"='"+attributes[i][1]+"'");                        eval("myXML.folders"+node+".@"+attributes[i][0]+"='"+attributes[i][1]+"'");                      }                                 }            // lknk up save to file            if (saveChgFile) {                //updating file on disk                $.writeln("updating file on disk");                overWriteFile(documentToUpdate, myXML);             }}///////////////////////////////////////////////////////////////////////////////// createNewLines - This function will allow a single line of text to be split across multiple lines in the PSD, by replaceing a special char with CharCode 13 (New line)///////////////////////////////////////////////////////////////////////////////function createNewLines(textString,charToSplit) {    // CSV file does not handle carridge return, so when the code finds a "~" it will substobute into Photoshop a new line.    var newLineArray = textString.split(charToSplit);var CopyLinewchr13=textString;  if (newLineArray.length>1) {    CopyLinewchr13="";        for (var m = 0; m < newLineArray.length; m++)        {            CopyLinewchr13 = CopyLinewchr13 + newLineArray[m]+"&#xD;";        }    }     var ret = "<characters>"+CopyLinewchr13+"</characters>";    return ret;    }