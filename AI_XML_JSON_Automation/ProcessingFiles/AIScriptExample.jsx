#include "RCFunctions.js" // RC Functions ignore line// Clear debug consolevar bt = new BridgeTalk();bt.target = 'estoolkit-4.0';bt.body = function(){    app.clc();    }.toSource()+"()";bt.send(5);// A list of file extensions to skip, keep them lower casegFileTypesToFind = Array( "ai");gListofFilestoProcess = new Array ();lastFolderProcessed= new String();gXMLFileTypesToFind = Array( "ai");//gXMLFileTypesToFind = Array( "xml");fileFound = false;///////////////////////////////////////////////////////////////////////////////// Work out which OS platform we are running on// Ask the user to point to the folder for XFL file & Text processing///////////////////////////////////////////////////////////////////////////////if (isOSX()){        // House Keeping for wrunning the script on OSX        // Get Relative Folder location. This ensures that the script can run anywhere, in particular when shared on Creative Cloud.        var relativePath = getRelativePath();                $.writeln ( "Based from Relative Path = " + relativePath);        // Ask user to select the processing file      //   var baseFolder = File.openDialog('Select a processing Folder', function (f) { return (f instanceof Folder); } );      var inputFolder = Folder.selectDialog("Select a folder of documents to process");      //   alert ("inputFolder " +inputFolder);       // var csvFile = File.openDialog('Select a CSV File', function (f) { return (f instanceof Folder) || f.name.match(/\.csv$/i);} );} else{    // Windows Processing - Needs to be completed, if required.    var csvFile = File.openDialog('Select a CSV File','comma-separated-values(*.csv):*.csv;');}///////////////////////////////////////////////////////////////////////////////// Return array of folder names for XFL processing based on the folder that the user chooses.// Main logic processing/////////////////////////////////////////////////////////////////////////////////$.writeln("gListofFilestoProcess" + gListofFilestoProcess);findFilesProcess(inputFolder, gFileTypesToFind);//$.writeln("gListofFilestoProcess" + gListofFilestoProcess);//Read folders that contain the Animate CC RAW XML / XFL files//$.writeln("number of folders to process " +gListofFilestoProcess.length);for (readAIFolder=0;readAIFolder < gListofFilestoProcess.length;readAIFolder++) {    $.writeln("glist="+gListofFilestoProcess[readAIFolder]);    $.writeln("number of folders to process " +gListofFilestoProcess.length);     $.writeln("here RC ");            var fileList = gListofFilestoProcess[readAIFolder].getFiles();            var textFilesToOpen = [];            for ( var flIndex = 0; flIndex < fileList.length; flIndex++ ) {                $.write("fl index="+flIndex);                if (fileList[flIndex] instanceof File ) {                    // Find XFL files                    var foundFileType = IsFileOneOfThese( fileList[flIndex],gXMLFileTypesToFind);//                      Found type of doc XML,                    if (foundFileType) {                        //make sure it's the correct name                      //  var lastDot = fileList[i].toString().lastIndexOf( "/" );  //                    if (fileList[flIndex].toString().substr( fileList[flIndex].toString().lastIndexOf( "/" )+1, fileList[flIndex].length ) == "DOMDocument.xml") {                        //$.writeln("Domdoc file found "+ fileList[i].toString().substr( fileList[i].toString().lastIndexOf( "/" )+1, fileList[i].length )) ;                        //  ProcessDomDocXMLfile for each XFL definition file    //                     XMLFilesToOpen = processDomDocFile(fileList[flIndex]);                         // Process each XFL linked XML Text file                   //      $.writeln("gListofFilestoProcess= "+ gListofFilestoProcess.length);                   //      $.writeln("gListofFilestoProcess[0]="+gListofFilestoProcess[0]);                         $.writeln("processsing ="+fileList[flIndex]);                         openAndProcessAI(fileList[flIndex],false);                   //      openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[0]);                   // call the processing and pass thru the folder that we are working with.      //                   openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[readXFLFolder]);     //                 }                    }                }            }            //$.writeln("XMLFilesToOpen="+XMLFilesToOpen);            //findFilesProcess(gListofFilestoProcess[readXFLFolder], gXMLFileTypesToFind);}function   openAndProcessAI(fileName,saveFile) {    sourceDoc = app.open(fileName);    //targetFile = new File( fileName);    //Ai scripting    //app.activeDocument.layers.getByName("Layer 1").visible = true;    // get layers length & name    var docLayers=[];    var xx = app.activeDocument.layers.length;        for (i=0;i<app.activeDocument.layers.length;i++) {            if (app.activeDocument.layers[i].visible) {            docLayers.push(app.activeDocument.layers[i].name);            $.writeln(app.activeDocument.layers[i].name);             }             }  doc = activeDocument;texts = doc.textFrames;count = texts.length;//$.writeln("ggg" + texts.length);//for (y=0;y<texts.length;y++) { //       $.writeln("texts " + texts.Name);  //      $.writeln("-"+texts[y].contents);  //      $.writeln("-"+texts[y].contents+" "+ texts[y].words.length);  //  }    //alert(xx);    // get layer details    //var xx = app.activeDocument.layers.getByName("BG").name;    //alert(xx);    // Read contents    $.writeln(app.activeDocument.layers.getByName("F2_LINE01_01").Visible.toString());    if (app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0]==null) {        $.writeln("no data");                }        $.writeln( "here " + app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0].isValid)  ;      $.writeln( "here " + app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0].contents)  ;      yy = app.activeDocument.layers.getByName("F3_DESCRIPTION_01").textFrames[0].contents="FRED";    $.writeln("contents are "+yy +"but changing to fred");    // Change contents    //var xx = app.activeDocument.layers.getByName("BG").textFrames[0].contents="Fred";    if (saveFile) {    app.activeDocument.close(SaveOptions.SAVECHANGES);    } else {    app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);    }    //alert(xx);    //var myFrame = app.activeDocument.groups.itemByName("BG").textFrames.itemByName("TEMP").name;    //myFrame.contents = "Spanish" }