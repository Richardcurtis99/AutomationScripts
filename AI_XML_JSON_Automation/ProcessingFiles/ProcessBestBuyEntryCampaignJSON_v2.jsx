// Clear debug consolevar bt = new BridgeTalk();bt.target = 'estoolkit-4.0';bt.body = function(){    app.clc();    }.toSource()+"()";bt.send(5);// global variables for the XML node Find Featurevar foundNode=false;//var xarray =[];//var tempXArray =[];//var currLvl=0;//var myXML = <root><obj a1="01" a2="02" ><rc1>rc1</rc1></obj><temp></temp></root > ;var where="";foundNode=false;// Set up the namespace for the documentvar ns =new Namespace("http://ns.adobe.com/xfl/2008/");default xml namespace = ns;// Setup// Process the Campaign file and get the text nodes.#include "RCFunctions.js" // RC Functions ignore line#include "json2.js" // JSON2 Parser ignore:line    var script_file = File($.fileName); // get the location of the script file    var script_file_path = script_file.path; // get the path//    var file_to_read = File(script_file_path + "/CampaignText.json");// but we want JSON    var file_to_read = File(script_file_path + "/CampaignText-Samsung.json");// but we want JSON    var my_JSON_object = null; // create an empty variable    //  alert(file_to_read); // This could be interesting    var content; // this will hold the String content from the file    if(file_to_read !== false){// if it is really there          file_to_read.open('r'); // open it          content = file_to_read.read(); // read it          my_JSON_object =  JSON.parse(content);// now evaluate the string from the file //         $.writeln("length of JSON =" + my_JSON_object.length); //        $.writeln(my_JSON_object.toSource()); // if it all went fine we have now a JSON Object instead of a string call length //        $.writeln("ddd " + my_JSON_object.F2_LINE01); //        $.writeln("cta" + eval("my_JSON_object.cta")); //         $.writeln("Campaign" + eval("my_JSON_object.CAMPAIGN"));  //       var x="my_JSON_object.doesnotexist";   //      if (eval(x)==undefined) {   //             $.writeln("nodes nt found");   //          } else {   //             $.writeln( "Accessing the nodes " + eval(x));   //             }          file_to_read.close(); // always close files after reading          } else {          alert("Something went wrong in the parse"); // if something went wrong       }///////////////////////////////////////////////////////////////////////////////// Work out which OS platform we are running on// Ask the user to point to the folder for XFL file & Text processing///////////////////////////////////////////////////////////////////////////////if (isOSX()){        // House Keeping for wrunning the script on OSX        // Get Relative Folder location. This ensures that the script can run anywhere, in particular when shared on Creative Cloud.        var relativePath = getRelativePath();                $.writeln ( "Based from Relative Path = " + relativePath);        // Ask user to select the processing file      //   var baseFolder = File.openDialog('Select a processing Folder', function (f) { return (f instanceof Folder); } );      var inputFolder = Folder.selectDialog("Select a folder of documents to process");      //   alert ("inputFolder " +inputFolder);       // var csvFile = File.openDialog('Select a CSV File', function (f) { return (f instanceof Folder) || f.name.match(/\.csv$/i);} );} else{    // Windows Processing - Needs to be completed, if required.    var csvFile = File.openDialog('Select a CSV File','comma-separated-values(*.csv):*.csv;');}// Process AI files.// A list of file extensions to skip, keep them lower casegFileTypesToFind = Array( "ai");gListofFilestoProcess = new Array ();lastFolderProcessed= new String();gXMLFileTypesToFind = Array( "ai");//gXMLFileTypesToFind = Array( "xml");fileFound = false;///////////////////////////////////////////////////////////////////////////////// Return array of folder names for XFL processing based on the folder that the user chooses.// Main logic processing/////////////////////////////////////////////////////////////////////////////////$.writeln("gListofFilestoProcess" + gListofFilestoProcess);findFilesProcess(inputFolder, gFileTypesToFind);//$.writeln("gListofFilestoProcess" + gListofFilestoProcess);//Read folders that contain the Animate CC RAW XML / XFL files//$.writeln("number of folders to process " +gListofFilestoProcess.length);if (true==false) {for (readAIFolder=0;readAIFolder < gListofFilestoProcess.length;readAIFolder++) {    $.writeln("glist="+gListofFilestoProcess[readAIFolder]);    $.writeln("number of folders to process " +gListofFilestoProcess.length);     $.writeln("here RC ");            var fileList = gListofFilestoProcess[readAIFolder].getFiles();            var textFilesToOpen = [];            for ( var flIndex = 0; flIndex < fileList.length; flIndex++ ) {                $.write("fl index="+flIndex);                if (fileList[flIndex] instanceof File ) {                    // Find XFL files                    var foundFileType = IsFileOneOfThese( fileList[flIndex],gXMLFileTypesToFind);//                      Found type of doc XML,                    if (foundFileType) {                        //make sure it's the correct name                      //  var lastDot = fileList[i].toString().lastIndexOf( "/" );  //                    if (fileList[flIndex].toString().substr( fileList[flIndex].toString().lastIndexOf( "/" )+1, fileList[flIndex].length ) == "DOMDocument.xml") {                        //$.writeln("Domdoc file found "+ fileList[i].toString().substr( fileList[i].toString().lastIndexOf( "/" )+1, fileList[i].length )) ;                        //  ProcessDomDocXMLfile for each XFL definition file    //                     XMLFilesToOpen = processDomDocFile(fileList[flIndex]);                         // Process each XFL linked XML Text file                   //      $.writeln("gListofFilestoProcess= "+ gListofFilestoProcess.length);                   //      $.writeln("gListofFilestoProcess[0]="+gListofFilestoProcess[0]);        //                 $.writeln("processsing ="+fileList[flIndex]);                         openAndProcessAI(fileList[flIndex],true);                   //      openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[0]);                   // call the processing and pass thru the folder that we are working with.      //                   openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[readXFLFolder]);     //                 }                    }                }            }            //$.writeln("XMLFilesToOpen="+XMLFilesToOpen);            //findFilesProcess(gListofFilestoProcess[readXFLFolder], gXMLFileTypesToFind);}} // remove one finished debugging////////////////////Process the XFL files//if (true == false) {    // A list of file extensions to skip, keep them lower casegFileTypesToFind = Array( "xfl");gListofFilestoProcess = new Array ();lastFolderProcessed= new String();gXMLFileTypesToFind = Array( "xml");fileFound = false;///////////////////////////////////////////////////////////////////////////////// Return array of folder names for XFL processing based on the folder that the user chooses.// Main logic processing///////////////////////////////////////////////////////////////////////////////$.writeln("gListofFilestoProcess" + gListofFilestoProcess);findFilesProcess(inputFolder, gFileTypesToFind);$.writeln("gListofFilestoProcess" + gListofFilestoProcess);//Read folders that contain the Animate CC RAW XML / XFL files$.writeln("number of folders to process " +gListofFilestoProcess.length);for (readXFLFolder=0;readXFLFolder < gListofFilestoProcess.length;readXFLFolder++) {    $.writeln("glist="+gListofFilestoProcess[readXFLFolder]);    $.writeln("number of folders to process " +gListofFilestoProcess.length);     $.writeln("here RC ");            var fileList = gListofFilestoProcess[readXFLFolder].getFiles();            var textFilesToOpen = [];            for ( var flIndex = 0; flIndex < fileList.length; flIndex++ ) {                $.write("fl index="+flIndex);                if (fileList[flIndex] instanceof File ) {                    // Find XFL files                    var foundFileType = IsFileOneOfThese( fileList[flIndex],gXMLFileTypesToFind);//                      Found type of doc XML,                    if (foundFileType) {                        //make sure it's the correct name                      //  var lastDot = fileList[i].toString().lastIndexOf( "/" );                      if (fileList[flIndex].toString().substr( fileList[flIndex].toString().lastIndexOf( "/" )+1, fileList[flIndex].length ) == "DOMDocument.xml") {                        //$.writeln("Domdoc file found "+ fileList[i].toString().substr( fileList[i].toString().lastIndexOf( "/" )+1, fileList[i].length )) ;                        //  ProcessDomDocXMLfile for each XFL definition file                         XMLFilesToOpen = processDomDocFile(fileList[flIndex]);                         // Process each XFL linked XML Text file                         $.writeln("gListofFilestoProcess= "+ gListofFilestoProcess.length);                         $.writeln("gListofFilestoProcess[0]="+gListofFilestoProcess[0]);                         $.writeln("processsing ="+fileList[flIndex]);                   //      openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[0]);                   // call the processing and pass thru the folder that we are working with.                         openAndProcessEachXFL_XMLFile(XMLFilesToOpen,gListofFilestoProcess[readXFLFolder]);                      }                    }                }            }            //$.writeln("XMLFilesToOpen="+XMLFilesToOpen);            //findFilesProcess(gListofFilestoProcess[readXFLFolder], gXMLFileTypesToFind);}//} // turned off temporarily///////////////////////////////////////////////////////////////////////////////// processDomDocFile- Read the DomDocument file, this is the core of the XFL Animate CC file.// This function reads the XFL file and reads each HREF on the Symbols node// Symnbols node contains the links to the XML files that contain the Image referneces and text references./////////////////////////////////////////////////////////////////////////////////function processDomDocFile(filename) {                 var stopReadingDomDoc=false;          var targetXMLFiles = [];               var file_to_read = File(filename);          file_to_read.open('r'); // open it          content = file_to_read.read(); // read it           var myXML = new XML(content);          var DomDocDescendents=myXML.descendants(); // can speficit the node here as well           for (var idesc=0;idesc<DomDocDescendents.length() && stopReadingDomDoc==false;idesc++) {            var ns_name = DomDocDescendents[idesc].name();            $.writeln(ns_name.localName);            if (ns_name.localName == "symbols") {                var symbolsXML=myXML.descendants("symbols");                stopReadingDomDoc=true;            }           }        var symbolDescLength = symbolsXML.descendants().length();    var symbolDescendents = symbolsXML.descendants();    for (var o=0;o<symbolDescendents.length();o++) {            //var n = symbolDescendents[o].name();        var includeAttrs = getAttributes(symbolDescendents[o].toXMLString());        // attributres on include 2 is Href        //getFile name (no extension)        var substrStartPosn=0;        var substrEndPosn = includeAttrs[2][1].toString().lastIndexOf( "." );        var xfileName ="";        if (includeAttrs[2][1].toString().lastIndexOf( "/") >0) {            substrStartPosn = includeAttrs[2][1].toString().lastIndexOf( "/")+1;            xfileName = includeAttrs[2][1].toString().substr(substrStartPosn,includeAttrs[2][1].toString().length);            xfileName = xfileName.substr(0,xfileName.lastIndexOf( "." ));            }     else {      //            var xfileName = includeAttrs[2][1].toString().substr(substrStartPosn,substrEndPosn);          xfileName = includeAttrs[2][1].toString().substr(substrStartPosn,substrEndPosn);      }    // Is there a value in teh JSON Object?        if (my_JSON_object.hasOwnProperty(xfileName)) {            // push both file name the JSON Reference.            targetXMLFiles.push(includeAttrs[2][1]+"|"+xfileName);                     }    }    var attributes = getAttributes(symbolsXML);         return  targetXMLFiles;}///////////////////////////////////////////////////////////////////////////////// openAndProcessEachXFLTextFile - for each set of XML files that we need to target, will open and update the texto the new JSON files ///////////////////////////////////////////////////////////////////////////////function openAndProcessEachXFL_XMLFile(textFilesToOpen,foldername) {  //  $.writeln("Hello World");  //  $.writeln("FOLDER NAME =" +foldename);   // $.writeln(textFilesToOpen.toString());   // $.writeln(textFilesToOpen.length);    // open each file     $.writeln("length of array="+textFilesToOpen.length);    for (tfoidx=0;tfoidx<textFilesToOpen.length;tfoidx++) {        $.writeln("index = "+tfoidx);        $.writeln("text file to open = " + textFilesToOpen[tfoidx]);        // Split the index value by a |        var splitdata=textFilesToOpen[tfoidx].split('|');                // Look at the Library folder within the XFL, this is where the XML files that contain the text references.     //   var fileNametoOpen = foldername + "/LIBRARY/"+ textFilesToOpen[[i];      var fileNametoOpen = foldername + "/LIBRARY/"+ splitdata[0];             //open the correct file Name        $.writeln("file name to open = " + fileNametoOpen);                var config = new File(fileNametoOpen);        config.open("r");          config.encoding = "UTF8";        var xmlString = config.read();          var myXML = new XML(xmlString);          $.writeln( myXML.toString());        $.writeln("wer are here in the logic");        // Reset the current level of the node searcher        currLvl=0;        foundNode=false;        where ="";        findNodeList(myXML,"DOMTextRun",where);               //$.writeln("found node ?" + foundNode);         //    changeOK = changeNodeValues(config,"folders.DOMFolderItem","http://ns.adobe.com/xfl/2008/",true);        if (foundNode) {            $.writeln("file to open=" + fileNametoOpen)            // update characters on the text node            // pass in the JSON object which is related to the open file (i.e. CTA.xml will refer to CTA in the JSON file.            $.writeln("where, node list = " + where+".characters");            var JSONNode = eval("my_JSON_object."+splitdata[1]);            $.writeln("updating from JSON="+JSONNode);                        //changeNodeValues(fileNametoOpen, where+".characters",JSONNode, "http://ns.adobe.com/xfl/2008/", "Y");            changeNodeValues(fileNametoOpen, where,JSONNode, "http://ns.adobe.com/xfl/2008/", "Y");        }        // overwriteFile        //overWriteFile(fileName, dataToWrite);//        findNodeList(myXML,"DOMTextRun",currLvl);        //        $.writeln("node list = " + xarray);//        $.writeln("found node ?" + foundNode);             //var e=myXML.descendants("DOMTextRun").parent();        //var t=myXML.descendants("textRuns").parent();        //var y=myXML.descendants("DOMStaticText").parent().childIndex();                //var elem=myXML.descendants("elements").parent();        //var domf = myXML.descendants("DOMFrame").parent();                //var d=myXML.descendants("DOMTextRun");        //var dlength =  d.elements().length();       // $.writeln( "D " +d);       // $.writeln( "D length " +myXML.descendants("DOMTextRun").length);       // $.writeln("chars="+d.characters);       // $.writeln("chars="+d.characters);        //d.characters.values.push("i've changed");//        $.writeln("myXML persistant Data = "+myXML.toString());      // var xx = myXML.RC;      // myXML.RC="HELLO FROM JS";    //         $.writeln("myXML persistant Data = "+myXML.toString());       // $.writeln("myXML persistantDOMFolder Data = "+myXML.folders.DOMFolderItem);     //   $.writeln("myxml="+myXML);   //     $.writeln("new chars="+d.characters);    // var d=myXML.descendants("characters");            config.close();    }}///////////////////////////////////////////////////////////////////////////////// findNodeList - find to see if a node exists in a DOM structure, as well as list the parent nodes.// needs global variables//// var foundNode=false;// var where="";///////////////////////////////////////////////////////////////////////////////function findNodeList(XMLtree,nodeToFind,xWhere) {        $.writeln("found node = "+xWhere);    $.writeln("found node = "+foundNode);      if (foundNode==false) {           //var tempWhere="";           var tempWhere; //         var DomDescendents=XMLtree.descendants(); // can speficit the node here as well          var DomDescendents=XMLtree.elements(); // can speficit the node here as well          // if end of a chain and nothing found, then reset the foundnodelist    //      if (DomDescendents.length()==0 ) {     //         xarray =[];     //         }         // $.writeln(DomDescendents.length());         // $.writeln(         // If there are no more elements to process and nothing was found, then reset all variables.         $.writeln("Dom descendents length = "+ DomDescendents.length());          if (DomDescendents.length()==0 ){              if (!foundNode) {                $.writeln("nothing found");                tempWhere="";                xWhere="";                where="";                currentNode="";               // xarray=[];              }           }                 // read ech element that exists in the loop                 for (var idesc=0;idesc<DomDescendents.length();idesc++ ) {              $.writeln("CURRENT idesc="+idesc);              $.writeln("dd length="+DomDescendents.length());        // as long as the mathcing node has not been found, process more elements           if (foundNode==false ) {                //. Found something                // for each element found                $.writeln("dom desc="+DomDescendents[idesc]);                var ns_name = DomDescendents[idesc].localName();                var currentNode;                // looping ot the current level, so rest the current node                                            $.writeln("tempwhere="+tempWhere);                //                if (currentNode!="") {   //                 currentNode= currentNode+"."+ns_name;      //              } else {  //rc              currentNode=ns_name;                  currentNode=xWhere+"."+ns_name;                       // }//                currentNode = currentNode +"." + ns_name;                $.writeln("current node ="+currentNode);                $.writeln("xWhere = "+xWhere);                //if (foundNode == false) {              $.writeln("ns_name = "+ns_name)               // what's the value of tempwhere?                           //   if (tempWhere!="") {            //        currentNode=currentNode+tempWhere;             //       } else {               // currentNode=ns_name;}               }                $.writeln("tempwhere="+tempWhere);                                         //       tempWhere = ","+ns_name;                     //       $.writeln("where 1 = "+ tempWhere);                // store the parent   //             xarray.push(ns_name);            // if an element was found to match, then fail all and pass back the current node string.            if (ns_name==nodeToFind) {                                tempwhere=ns_name;                where = currentNode;                foundNode=true;                }     else {                    // if name does not match, then go to the next level                 //   $.writeln("domdesc = "+DomDescendents[idesc].toString());                 $.writeln("current node="+currentNode);                    tempwhere = findNodeList(DomDescendents[idesc],nodeToFind,currentNode);                    $.writeln("tempwhere ="+tempwhere);                }                            //var ns_xml = DomDescendents[idesc].toXMLString();            //$.writeln("ns_xml" + ns_xml);           // var ev = eval("root.obj");            //$.writeln("dd="+ns_name);    //        }            //findNodeList(XMLtree[0])        //    $.writeln(ns_name.localName);            //xarray.push(ns_name.localName);                       // findNodeList(startNode,nodeToFind)       //     if (ns_name.localName == "symbols") {          //      var symbolsXML=myXML.descendants("symbols");           //     stopReadingDomDoc=true;            //  }            }            }    if (foundNode) {     //   //where = tempwhere;     //   where = where +","+xWhere;    // where = currentNode;       //return xWhere=xWhere+","+ns_name;       return "";     } else {         return "";}}///////////////////////////////////////////////////////////////////////////////// openAndProcessAI - process the Illustrator files before the Animate files/////////////////////////////////////////////////////////////////////////////////function   openAndProcessAI(fileName,saveFile) { // $.writeln("opening file " + fileName);    sourceDoc = app.open(fileName);    //targetFile = new File( fileName);    //Ai scripting    //app.activeDocument.layers.getByName("Layer 1").visible = true;    // get layers length & name    var docLayers=[];    var xx = app.activeDocument.layers.length;        for (i=0;i<app.activeDocument.layers.length;i++) {            // Only Process the ones that are visbible in the document            if (app.activeDocument.layers[i].visible) {//                my_JSON_object            var layerName = app.activeDocument.layers[i].name.split("_");            $.writeln("layer name = "+layerName[0]+"_"+layerName[1]);  //          $.writeln("my_JSON_object.hasOwnProperty('"+layerName[0]+"_"+layerName[1]+"')");  //          $.writeln("my JSON =" + eval("my_JSON_object.hasOwnProperty('"+layerName[0]+"_"+layerName[1]+"')"));              //          $.writeln("fff");                if (eval("my_JSON_object.hasOwnProperty('"+layerName[0]+"_"+layerName[1]+"')")) {                    //if (my_JSON_object.hasOwnProperty(xfileName)) {                        $.writeln("current contents = " +app.activeDocument.layers.getByName(app.activeDocument.layers[i].name).textFrames[0].contents);                    docLayers.push(app.activeDocument.layers[i].name);                    // insert new line                       var newTextFrameData = eval("my_JSON_object."+layerName[0]+"_"+layerName[1]);                       var newTextFrameArray = newTextFrameData.split(":");                       var newContents = "";                       for (TFA=0;TFA<newTextFrameArray.length;TFA++) {                           if (TFA>0) {                               newContents = newContents + "\r";                               }                           newContents = newContents+newTextFrameArray[TFA];                           }                       $.writeln("new contents will be equal to " + newContents);       //               $.writeln(app.activeDocument.layers[i].name);        //              $.writeln("fetched data "+eval("my_JSON_object."+layerName[0]+"_"+layerName[1]));                      app.activeDocument.layers.getByName(app.activeDocument.layers[i].name).textFrames[0].contents=newContents;             }            }             }  //doc = activeDocument;//texts = doc.textFrames;//count = texts.length;//$.writeln("ggg" + texts.length);//for (y=0;y<texts.length;y++) { //       $.writeln("texts " + texts.Name);  //      $.writeln("-"+texts[y].contents);  //      $.writeln("-"+texts[y].contents+" "+ texts[y].words.length);  //  }    //alert(xx);    // get layer details    //var xx = app.activeDocument.layers.getByName("BG").name;    //alert(xx);    // Read contents//    $.writeln(app.activeDocument.layers.getByName("F2_LINE01_01").Visible.toString()); //   if (app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0]==null) { //       $.writeln("no data");               // }//        $.writeln( "here " + app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0].isValid)  ;  //    $.writeln( "here " + app.activeDocument.layers.getByName("F2_LINE01_01").textFrames[0].contents)  ;  //    yy = app.activeDocument.layers.getByName("F3_DESCRIPTION_01").textFrames[0].contents="FRED";//    $.writeln("contents are "+yy +"but changing to fred");    // Change contents    //var xx = app.activeDocument.layers.getByName("BG").textFrames[0].contents="Fred";    if (saveFile) {    app.activeDocument.close(SaveOptions.SAVECHANGES);    } else {    app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);    }    //alert(xx);    //var myFrame = app.activeDocument.groups.itemByName("BG").textFrames.itemByName("TEMP").name;    //myFrame.contents = "Spanish" }