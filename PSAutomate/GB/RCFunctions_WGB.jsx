/////////////////////////////////////////////////////////////////////////////////// Richard Curtis CC - Automation scripting functions///////////////////////////////////////////////////////////////////////////////////        var layerNamesGlobalArray = new Array();//        var layerNamesWTGlobalArray = new Array();        var PSDlayerNamesGlobalArray = new Array();        var PSDlayerNamesTypeGlobalArray = new Array();        var numberOfLayersFound;        // keep track of layers         var whichLayersON = new Array();    $.writeln("RC Functions Loaded");    // Helper Functionsfunction clearConsole() {    // Clear console    var bt = new BridgeTalk();    bt.target = 'estoolkit-4.0';    bt.body = function(){    app.clc();    }.toSource()+"()";    bt.send(5);}function isOSX(){    return $.os.match(/Macintosh/i);}///////////////////////////////////////////////////////////////////////////////// getAttributes- Get attributes from the XML nodes in the XFL file///////////////////////////////////////////////////////////////////////////////function getAttributes(xml_node_str) {  // select the start tag <elem >  var reg_exp = /<[^>]*>/;  var start_tag_str = reg_exp.exec(xml_node_str);  // extract the attributes  reg_exp = /[^"\s]*="[^"]*"/g;  var result;  var attributes = [];  while ((result = reg_exp.exec(start_tag_str)) !== null) {    // the attribute (name="value")    var attr = result[0];    // array containing name and "value"    var attr_arr = attr.split('=');    // delete the "'s    attr_arr[1] = attr_arr[1].substr(1, attr_arr[1].length - 2);    attributes.push(attr_arr);  }  return attributes;}    ///////////////////////////////////////////////////////////////////////////////// IsFileOneOfThese- File files of a certain extension type // This function will go and look in a file name to see if it can find the extension supplied.// i.e. ai = Illustrstor file.///////////////////////////////////////////////////////////////////////////////function IsFileOneOfThese( inFileName, inArrayOfFileExtensions ) {	var lastDot = inFileName.toString().lastIndexOf( "." );	if ( lastDot == -1 ) {		return false;	}	var strLength = inFileName.toString().length;	var extension = inFileName.toString().substr( lastDot + 1, strLength - lastDot );	extension = extension.toLowerCase();	for (var i = 0; i < inArrayOfFileExtensions.length; i++ ) {		if ( extension == inArrayOfFileExtensions[i] ) {			return true;		}	}    return false;}///////////////////////////////////////////////////////////////////////////////// getRelativePath- The purpose of the script is that it can be run from a shared folder on Creative CLoud, this function will get the local relative folder on the operators system///////////////////////////////////////////////////////////////////////////////function getRelativePath() {        // We need everything to come from where the CSV / Script is run from, so this gets the relative path and works out where things need to be        // this means that the script can be distributed via Crestive Cloud and anyone can run it and then use the Sync machinsm to get it to people that need the final output at any time        var ScriptFilePath = Folder($.fileName).parent.fsName ;         $.write("Current Folder"+Folder($.fileName).parent.fsName);        var splitFolder=Folder($.fileName).parent.fsName.split("/");        $.write(splitFolder.length);        var baseLoc="";        for (i=0;i<splitFolder.length-3;i++) {            baseLoc=baseLoc+splitFolder[i]+"/";        }       return baseLoc;}///////////////////////////////////////////////////////////////////////////////// overWriteFile- Overwrite File///////////////////////////////////////////////////////////////////////////////function overWriteFile(fileName, dataToWrite) {    var myFile=new File(fileName);                        myFile.open("w");    var data = myFile.read();    myFile.encoding = "UTF-8";    myFile.lineFeed = "Unix";    myFile.writeln(dataToWrite);    myFile.close();}///////////////////////////////////////////////////////////////////////////////// changeNodeValues- Change node vales in defined file///////////////////////////////////////////////////////////////////////////////changeNodeValues = function(documentToUpdate, node,chgToValue, setnamespace, saveChgFile) {                // set XFL Namespace         //       var ns =new Namespace("http://ns.adobe.com/xfl/2008/");                var fileIn = File(documentToUpdate);                //$.writeln("doc update=" + documentToUpdate);                var ns =new Namespace(setnamespace);                        default xml namespace = ns;                fileIn.open("r");                  var xmlString = fileIn.read();                 // fileIn.encoding = "UTF8";                var myXML = new XML(xmlString);                 $.writeln("myXML"+node+".toXMLString()");                var nodeXMLString = eval("myXML"+node+".toXMLString()");                var attributes = getAttributes(eval("myXML"+node+".toXMLString()"));                // process main node if                 //  Process main node                 // only create main node on first pass.                //              $.writeln("current value="+eval ("myXML"+node));                                //check for return                 var xx = createNewLines(chgToValue,":");                var spcChgToValue=new XML(xx);                //$.writeln("myXML"+node+" = '"+spcChgToValue.toString()+"'");                var x = "'myXML"+node+"=spcChgToValue'";                                delete(eval('myXML'+node+'.characters'));                                 eval('myXML'+node+'.characters = spcChgToValue');                                                $.writeln("here");                for (i=0;i<attributes.length;i++) {                        $.writeln("attributes[i][0] = " +attributes[i][0]);                         $.writeln("attributes[i][0] = " +attributes[i][1]);                         $.writeln("element name="+attributes[i][0]);                                         // dont process Name Space Elements, as these are passed down from the root node                      if (attributes[i][0] != "xmlns" && attributes[i][0]!="xmlns:xsi") {                        alert("myXML.folders"+node+".@"+attributes[i][0]+"='"+attributes[i][1]+"'");                        eval("myXML.folders"+node+".@"+attributes[i][0]+"='"+attributes[i][1]+"'");                      }                                 }            // lknk up save to file            if (saveChgFile) {                //updating file on disk                $.writeln("updating file on disk");                overWriteFile(documentToUpdate, myXML);             }}///////////////////////////////////////////////////////////////////////////////// createNewLines - This function will allow a single line of text to be split across multiple lines in the PSD, by replaceing a special char with CharCode 13 (New line)///////////////////////////////////////////////////////////////////////////////function createNewLines(textString,charToSplit) {    // CSV file does not handle carridge return, so when the code finds a "~" it will substobute into Photoshop a new line.    var newLineArray = textString.split(charToSplit);    var CopyLinewchr13=textString;    if (newLineArray.length>1) {        CopyLinewchr13="";        for (var m = 0; m < newLineArray.length; m++)        {            CopyLinewchr13 = CopyLinewchr13 + newLineArray[m]+"&#xD;";        }    }     var ret = "<characters>"+CopyLinewchr13+"</characters>";    return ret;}///////////////////////////////////////////////////////////////////////////////// loadLayersHarness - The layers loader is recursive, so need to have a front harnes to manage it. Load layer names into a global array///////////////////////////////////////////////////////////////////////////////function loadLayersHarness(ref) {    // Clear Array            PSDlayerNamesGlobalArray = Array();        PSDlayerNamesTypeGlobalArray = Array();        loadLayers(ref);}///////////////////////////////////////////////////////////////////////////////// loadLayers - This function will look through the open PSD file and layer names into the global array.///////////////////////////////////////////////////////////////////////////////function loadLayers(ref) {    // assume that layer does not exist in PSD    var okToContinue=false;        okToContinue = hasLayers();           // declare local variables        var layers = ref.layers;        var len = layers.length;        // see if layer names exists        if (okToContinue) {            // iterate through layers to find a match            for (var i = 0; i < len; i++) {            // test for matching layer                var layer = layers[i];                // process all layers in the document, as we need to know where the contents are relative of the inbound file system                var x="";                if (layer.kind == LayerKind.TEXT){x="TEXT"}                   $.writeln("layer name "+layer.name + "  - layer type " +layer.typename+" kind "+x);                    PSDlayerNamesGlobalArray.push(layer.name);                        PSDlayerNamesTypeGlobalArray.push(layer.typename);                //          if (layer.typename == 'ArtLayer') {                                 //         if (whichArray=="1L") {               //             layerNamesGlobalArray.push(layer.name);               //         }                 //   if (whichArray=="WT") {                  //      PSDlayerNamesGlobalArray.push(layer.name);                  //      PSDlayerNamesTypeGlobalArray.push(layer.typename);                 //   }                //        }                if (layer.typename == 'LayerSet') {                                             // handle groups (layer sets)                 loadLayers(layer);                }           }                } }  ///////////////////////////////////////////////////////////////////////////////// hasLayers - ensure that the active document contains at least one layer///////////////////////////////////////////////////////////////////////////////function hasLayers() {    var okToContinue=true;	var doc = activeDocument;	if (doc.layers.length == 1 && doc.activeLayer.isBackgroundLayer) {		$.writeln('The active document has no layers.', 'No Layers', false);		okToContinue= false;	}    return okToContinue;} ///////////////////////////////////////////////////////////////////////////////// function to read array and return true ot false, depending if the layer name was found in the global array ///////////////////////////////////////////////////////////////////////////////function findMatchInlayerNamesGlobalArray(nameToFind) {    var foundLayerName=false;    //Process main PSD's layer names        for (x=0;x<PSDlayerNamesGlobalArray.length;x++) {        if (PSDlayerNamesGlobalArray[x].toLowerCase() == nameToFind.toLowerCase()) {                foundLayerName = true;                            }    }        return foundLayerName;        } ///////////////////////////////////////////////////////////////////////////////// function to read array and find a match - return index value ///////////////////////////////////////////////////////////////////////////////function findMatchInlayerNamesGlobalArrayidx(nameToFind) {   // var foundLayerName=false;    var LayerNameIdx=0;    //Process main PSD's layer names        for (x=0;x<PSDlayerNamesGlobalArray.length;x++) {        if (PSDlayerNamesGlobalArray[x].toLowerCase() == nameToFind.toLowerCase()) {           //     foundLayerName = true;                                LayerNameIdx = x;            }    }    //    return foundLayerName;    return LayerNameIdx;        }///////////////////////////////////////////////////////////////////////////////// ReLinkToFile - This function will search for a layer, defined in the CSV file, then update it's contents (Linked Smart Object, from the image location parameter)///////////////////////////////////////////////////////////////////////////////function reLinkToFile(layerName,imageLocation, fileName) {                    // Following code came from the Listener                    // Select the correct layer in the PSD, then update from the designers work                   // Does the layer exist in the active document        //        var okToContinue=true;        var numberOfLayersFound=0;        var fullFileName=imageLocation+"/"+fileName;        //              $.writeln("fimageLocation=" + imageLocation);        //                              $.writeln("fileName=" + fileName);        $.writeln("replaceing with fullFileName=" + fullFileName);        if (fileName!="") {        //           okToContinue=findMatchInlayerNamesGlobalArray(layerName,whichArray);        // if layer name does not exist, then don't continue.        //       if (okToContinue) {        //     $.writeln("RELINK layer name ="+ layerName +" with "+fileName);        //Make sure File actually exists                if (!File( fullFileName).exists) {                    $.writeln("RELINKTOFILE - File Does not Exist"+fullFileName);                } else {                        // Re-link the file to a new file (for the country being processed)- code derived from the Photoshop Listner                                                      selectLayer(layerName);                                //                        var idslct = charIDToTypeID( "slct" );       //                       var desc33 = new ActionDescriptor();       //                       var idnull = charIDToTypeID( "null" );      //                       var ref8 = new ActionReference();      //                       var idLyr = charIDToTypeID( "Lyr " );                            //                       ref8.putName( idLyr, layerName);                        //                       desc33.putReference( idnull, ref8 );    //                       var idMkVs = charIDToTypeID( "MkVs" );    //                       desc33.putBoolean( idMkVs, false );    //                       var idLyrI = charIDToTypeID( "LyrI" );    //                       var list8 = new ActionList();    //                       list8.putInteger( 10 );    //                       desc33.putList( idLyrI, list8 );    //                       executeAction( idslct, desc33, DialogModes.NO );                        var idplacedLayerReplaceContents = stringIDToTypeID( "placedLayerRelinkToFile" );                        var desc5 = new ActionDescriptor();                        var idnull = charIDToTypeID( "null" );                        // Read files from the correct country code, defined from the CSV file.                        //                    desc5.putPath( idnull, new File( coreLocation+countryCode[1]+csvArray[1] ) );//                         desc5.putPath( idnull, new File( imageLocation +fileName));                        desc5.putPath( idnull, new File(fullFileName));                        executeAction( idplacedLayerReplaceContents, desc5, DialogModes.NO );                 }                   } else {                   $.writeln("1...");                $.writeln("Layer " +layerName+ " Not Found in this document");                   //           }            }     }   ///////////////////////////////////////////////////////////////////////////////// Save As- SAve File as ///////////////////////////////////////////////////////////////////////////////function saveAs(fileNametoSave, saveLocation) {    $.writeln("file name to save " +fileNametoSave);    $.writeln("save location " +saveLocation);    var idsave = charIDToTypeID( "save" );    var desc252 = new ActionDescriptor();    var idAs = charIDToTypeID( "As  " );    var desc253 = new ActionDescriptor();    var idmaximizeCompatibility = stringIDToTypeID( "maximizeCompatibility" );    desc253.putBoolean( idmaximizeCompatibility, true );    var idPhtthree = charIDToTypeID( "Pht3" );    desc252.putObject( idAs, idPhtthree, desc253 );    var idIn = charIDToTypeID( "In  " );    //    desc252.putPath( idIn, new File( "/Users/rcurtis/Creative Cloud Files/Fetch_Automation_Testing/Fetch Proposed - Automated/Layout/WhiteTail/India/LSO-Hands/Black-Hand-Right.psd" ) );    desc252.putPath( idIn, new File( saveLocation+fileNametoSave ) );    var idDocI = charIDToTypeID( "DocI" );    desc252.putInteger( idDocI, 1212 );    var idLwCs = charIDToTypeID( "LwCs" );    desc252.putBoolean( idLwCs, true );    var idsaveStage = stringIDToTypeID( "saveStage" );    var idsaveStageType = stringIDToTypeID( "saveStageType" );    var idsaveSucceeded = stringIDToTypeID( "saveSucceeded" );    desc252.putEnumerated( idsaveStage, idsaveStageType, idsaveSucceeded );    executeAction( idsave, desc252, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////// saveAsJPG- Save current document in JPG format///////////////////////////////////////////////////////////////////////////////function saveAsJPG(fileNametoSave, saveLocation) {    jpgFile = new File(saveLocation + fileNametoSave);    jpgSaveOptions = new JPEGSaveOptions();    jpgSaveOptions.embedColorProfile = true;    jpgSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE;    jpgSaveOptions.matte = MatteType.NONE;    jpgSaveOptions.quality = 12;    activeDocument.saveAs(jpgFile, jpgSaveOptions, true, Extension.LOWERCASE);}///////////////////////////////////////////////////////////////////////////////// deleteFolderAndContents- To make sure the output is clean each time the script runs, this function will read a folder structure and delete the contents.///////////////////////////////////////////////////////////////////////////////function deleteFolderAndContents(folderName) {    // This function makes sure that the output folder and it's contents from the last run are remvoed , before new contents are created.        $.write("deleting folder and contents " + folderName)        var aChildren = Folder(folderName).getFiles();            var aProcessedOBJ=0;         for (var i = 0; i < aChildren.length; i++) {                var child = aChildren[i];                $.writeln ( "child name,"+child.name);                if (child instanceof Folder) {                                                deleteFolderAndContents(folderName+"/"+child.name);                    }              File(folderName+"/"+child.name).remove();            }       File(folderName).remove();               }///////////////////////////////////////////////////////////////////////////////// createFolder- Create a new folder ///////////////////////////////////////////////////////////////////////////////function createFolder(folderName) {        // Function to create folders on the disk, ready for the output to be created for each run.     var newOutputFolder = new Folder(folderName);        newOutputFolder .create();    }///////////////////////////////////////////////////////////////////////////////// extendCanvas- Extend the currentCanvas// extendCanvas(2600) ///////////////////////////////////////////////////////////////////////////////function extendCanvas(newLength) {    var idCnvS = charIDToTypeID( "CnvS" );    var desc6702 = new ActionDescriptor();    var idHght = charIDToTypeID( "Hght" );    var idPxl = charIDToTypeID( "#Pxl" );    //    desc6702.putUnitDouble( idHght, idPxl, 2400.000000 );    desc6702.putUnitDouble( idHght, idPxl, newLength );    var idVrtc = charIDToTypeID( "Vrtc" );    var idVrtL = charIDToTypeID( "VrtL" );    var idTop = charIDToTypeID( "Top " );    desc6702.putEnumerated( idVrtc, idVrtL, idTop );    var idcanvasExtensionColorType = stringIDToTypeID( "canvasExtensionColorType" );    var idcanvasExtensionColorType = stringIDToTypeID( "canvasExtensionColorType" );    var idWht = charIDToTypeID( "Wht " );    desc6702.putEnumerated( idcanvasExtensionColorType, idcanvasExtensionColorType, idWht );    executeAction( idCnvS, desc6702, DialogModes.NO );}// =======================================================function moveLayer(layerName,fX,fY) {        selectLayer(layerName);//    var fX = 200;//    var fY = 200;    var mflayer = activeDocument.activeLayer;    $.writeln(mflayer.bounds);    var Position = mflayer.bounds;       if (fX!==0) {            $.writeln("position 0=" + Position[0] );            Position[0] = fX + Position[0];            $.writeln("position 0=" + Position[0] );            }  else {                Position[0] = 0;                }                               if (fY!==0) {                 $.writeln("position 1=" + Position[1] );  //  Position[1] = fY + Position[1];  Position[1] = fY;                     $.writeln("position 1=" + Position[1] );       } else {                Position[1] = 0;                }    mflayer.translate(Position[0] ,Position[1]);    $.writeln("position x=" + Position[0] );    $.writeln("position y=" + Position[1] );    $.writeln("  ");   //  Position[0] = fX - Position[0];   // Position[1] = fY - Position[1];   // mflayer.translate(-Position[0] ,-Position[1]);}///////////////////////////////////////////////////////////////////////////////// createNewLines - This function will allow a single line of text to be split across multiple lines in the PSD, by replaceing a special char with CharCode 13 (New line)///////////////////////////////////////////////////////////////////////////////function createNewLines(textString) {    // CSV file does not handle carridge return, so when the code finds a "~" it will substobute into Photoshop a new line.    var newLineArray = textString.split('~');    //  $.writeln("new lines length"+newLineArray.length);  if (newLineArray.length>0) {    var CopyLinewchr13="";    for (var m = 0; m < newLineArray.length; m++)    {      CopyLinewchr13 = CopyLinewchr13 + newLineArray[m]+String.fromCharCode(13);     }    } else {         CopyLinewchr13 = textString;     }    return CopyLinewchr13;    }///////////////////////////////////////////////////////////////////////////////// SetFomatting- Set formatting of a text layers contents////////////////////////////////////////////////////////////////////////////////*** The setFormatting function sets the font, font style, point size, and RGB color of specified* characters in a Photoshop text layer.** @param start (int) the index of the insertion point *before* the character you want.,* @param end (int) the index of the insertion point following the character.* @param fontName is a string for the font name.* @param fontStyle is a string for the font style.* @param fontSize (Number) the point size of the text.* @param colorArray (Array) is the RGB color to be applied to the text.*/  	//var document:Document = app.documents.add(600, 600);    //document.artLayers.add();	//textLayer.kind = LayerKind.TEXT;	//textLayer.textItem.contents = "The Literate Hen: A Text Layer";	//textLayer.textItem.font = "Tekton Pro";	//textLayer.textItem.size = 36;	//Make certain that the layer is the active layer.	//app.activeDocument.activeLayer = textLayer;             //test   var text="this~is a very long word which i think will auto wrap on the text layer~def";    //test    app.activeDocument.activeLayer.textItem.contents=createNewLines(text);	//test setFormatting(0, 4, "Tekton Pro", "Bold Condensed", 48, new Array(0, 0, 0),20);	//You can apply more formatting without disturbing the existing formatting.	//We’ll make the text "Hen" little and red.	//test setFormatting(4, 17, "Tekton Pro", "Bold Condensed", 36, new Array(255, 0, 0),10);	//Set just the size of the last word.	//test setFontSize(25, 30, 48); function setFormatting(start, end, fontName, fontStyle, fontSize, colorArray, leading) {		//Sanity checking: is the active layer a text layer?            			if((app.activeDocument.activeLayer.textItem.contents != "")){                  end=end+start;				var idsetd = app.charIDToTypeID( "setd" );				var action = new ActionDescriptor();				var idnull = app.charIDToTypeID( "null" );				//The action reference specifies the active text layer.				var reference = new ActionReference();				var idTxLr = app.charIDToTypeID( "TxLr" );				var idOrdn = app.charIDToTypeID( "Ordn" );				var idTrgt = app.charIDToTypeID( "Trgt" );				reference.putEnumerated( idTxLr, idOrdn, idTrgt );				action.putReference( idnull, reference );				var idT = app.charIDToTypeID( "T   " );				var textAction= new ActionDescriptor();				var idTxtt = app.charIDToTypeID( "Txtt" );				//actionList contains the sequence of formatting actions.				var actionList = new ActionList();				//textRange sets the range of characters to format.				var textRange= new ActionDescriptor();				var idFrom = app.charIDToTypeID( "From" );				textRange.putInteger( idFrom, start );				textRange.putInteger( idT, end );				var idTxtS = app.charIDToTypeID( "TxtS" );				//The "formatting" ActionDescriptor holds the formatting. It should be clear that you can				//add other attributes here--just get the relevant lines (usually 2) from the Script Listener 				//output and graft them into this section.				var formatting = new ActionDescriptor();				//Font name.				var idFntN = app.charIDToTypeID( "FntN" );				formatting.putString( idFntN, fontName );				//Font style.				var idFntS = app.charIDToTypeID( "FntS" );				formatting.putString( idFntS, fontStyle );				//Font size.				var idSz = app.charIDToTypeID( "Sz  " );				var idPnt= app.charIDToTypeID( "#Pnt" );				formatting.putUnitDouble( idSz, idPnt, fontSize );                  //Leading                  var idautoLeading = stringIDToTypeID( "autoLeading" );                  formatting.putBoolean( idautoLeading, false );                  var idLdng = charIDToTypeID( "Ldng" );                  var idPnt = charIDToTypeID( "#Pnt" );                  formatting.putUnitDouble( idLdng, idPnt, 460.692263 );                  //                  formatting.putUnitDouble( idLdng, idPnt, leading );                  var idimpliedLeading = stringIDToTypeID( "impliedLeading" );                  var idPnt = charIDToTypeID( "#Pnt" );                  //                  formatting.putUnitDouble( idimpliedLeading, idPnt, 177.999999 );                  formatting.putUnitDouble( idimpliedLeading, idPnt, leading );                  var idTrck = charIDToTypeID( "Trck" );                  formatting.putInteger( idTrck, 0 );                  var idBsln = charIDToTypeID( "Bsln" );                  var idPnt = charIDToTypeID( "#Pnt" );                  formatting.putUnitDouble( idBsln, idPnt, 0.000000 );                  var idimpliedBaselineShift = stringIDToTypeID( "impliedBaselineShift" );                  var idPnt = charIDToTypeID( "#Pnt" );                  formatting.putUnitDouble( idimpliedBaselineShift, idPnt, 0.000000 );                   				//Fill color (as an RGB color).				var idClr = app.charIDToTypeID( "Clr " );				var colorAction = new ActionDescriptor();				var idRd = app.charIDToTypeID( "Rd  " );				colorAction.putDouble( idRd, colorArray[0] );				var idGrn= app.charIDToTypeID( "Grn " );				colorAction.putDouble( idGrn, colorArray[1]);				var idBl = app.charIDToTypeID( "Bl  " );				colorAction.putDouble( idBl, colorArray[2] );				var idRGBC = app.charIDToTypeID( "RGBC" );				formatting.putObject( idClr, idRGBC, colorAction );				//end color.				textRange.putObject( idTxtS, idTxtS, formatting );				actionList.putObject( idTxtt, textRange );				textAction.putList( idTxtt, actionList );				action.putObject( idT, idTxLr, textAction );				app.executeAction( idsetd, action, DialogModes.NO );	}}///////////////////////////////////////////////////////////////////////////////// switchLayerVisibility - Switch layer visibiliity/////////////////////////////////////////////////////////////////////////////////* The setFontSize function sets the size of specified//* characters in a Photoshop text layer.//*//* @param start (int) index of the insertion point *before* the character you want.,//* @param end (int) index of the the insertion point following the character.//* @param fontSize (Number) the point size of the text.//*////////////////////////////////////////////////////////////////////////////////function setFontSize(start, end, fontSize) {		//Sanity checking: is the active layer a text layer?    //	if(app.activeDocument.activeLayer is ArtLayer){    //		var activeLayer:ArtLayer = app.activeDocument.activeLayer as ArtLayer;    //		if(activeLayer.kind == LayerKind.TEXT){			//More checking: does the text layer have content, and are start and end set to reasonable values?			if((app.activeDocument.activeLayer.textItem.contents != "")){				//The indentation that the Script Listerner gives you is weird, but it’s useful.				var idsetd = app.charIDToTypeID( "setd" );				var action = new ActionDescriptor();				var idnull = app.charIDToTypeID( "null" );				//The action reference specifies the active text layer.				var reference = new ActionReference();				var idTxLr = app.charIDToTypeID( "TxLr" );				var idOrdn = app.charIDToTypeID( "Ordn" );				var idTrgt = app.charIDToTypeID( "Trgt" );				reference.putEnumerated( idTxLr, idOrdn, idTrgt );				action.putReference( idnull, reference );				var idT = app.charIDToTypeID( "T   " );				var textAction = new ActionDescriptor();				var idTxtt = app.charIDToTypeID( "Txtt" );				//actionList contains the sequence of formatting actions.				var actionList = new ActionList();				//textRange sets the range of characters to format.				var textRange = new ActionDescriptor();				var idFrom = app.charIDToTypeID( "From" );				textRange.putInteger( idFrom, start );				textRange.putInteger( idT, end );				var idTxtS = app.charIDToTypeID( "TxtS" );				//The "formatting" ActionDescriptor holds the formatting. It should be clear that you can				//add other attributes here--just get the relevant lines (usually 2) from the Script Listener 				//output and graft them into this section.				var formatting = new ActionDescriptor();				//Font size.				var idSz = app.charIDToTypeID( "Sz  " );				var idPnt = app.charIDToTypeID( "#Pnt" );				formatting.putUnitDouble( idSz, idPnt, fontSize );				textRange.putObject( idTxtS, idTxtS, formatting );				actionList.putObject( idTxtt, textRange );				textAction.putList( idTxtt, actionList );				action.putObject( idT, idTxLr, textAction );				app.executeAction( idsetd, action, DialogModes.NO );			}		}            ///////////////////////////////////////////////////////////////////////////////// switchLayerVisibility - Switch layer visibiliity///////////////////////////////////////////////////////////////////////////////function switchLayerVisibility(vislayerName,switchONOFF) {    // look for layer    selectLayer(vislayerName );    $.writeln("layer visibility of layer " +vislayerName+"="+ app.activeDocument.activeLayer.visible);      if (switchONOFF=="OFF") {             $.writeln("turning off layer ="+vislayerName);              for (i=0;i<whichLayersON.length;i++) {                   }            hideLayer();    }     if (switchONOFF=="ON") {            // it not switching then turn layer off           $.writeln("turning on layer ="+vislayerName);            whichLayersON.push(vislayerName);           for (d=0;d<whichLayersON.length;d++) {$.writeln("adding layer name ="+vislayerName+", index =" +d + ", layer name = " + whichLayersON[d])};           showLayer();     }            }///////////////////////////////////////////////////////////////////////////////// showLayer - Show a specific layer///////////////////////////////////////////////////////////////////////////////function showLayer() {var idShw = charIDToTypeID( "Shw " );    var desc11825 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var list1368 = new ActionList();            var ref1241 = new ActionReference();            var idLyr = charIDToTypeID( "Lyr " );            var idOrdn = charIDToTypeID( "Ordn" );            var idTrgt = charIDToTypeID( "Trgt" );            ref1241.putEnumerated( idLyr, idOrdn, idTrgt );        list1368.putReference( ref1241 );    desc11825.putList( idnull, list1368 );executeAction( idShw, desc11825, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////// hideLayer -  hide a layer///////////////////////////////////////////////////////////////////////////////function hideLayer() {var idHd = charIDToTypeID( "Hd  " );    var desc11826 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var list1369 = new ActionList();            var ref1242 = new ActionReference();            var idLyr = charIDToTypeID( "Lyr " );            var idOrdn = charIDToTypeID( "Ordn" );            var idTrgt = charIDToTypeID( "Trgt" );            ref1242.putEnumerated( idLyr, idOrdn, idTrgt );        list1369.putReference( ref1242 );    desc11826.putList( idnull, list1369 );executeAction( idHd, desc11826, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////// initVariableWLayersOFF- There are toggalable layers in the document, depending on if a 3 or 4 wide layout - Read layers that have ///////////////////////////////////////////////////////////////////////////////function initVariableWLayersOFF () {    whichLayersON=[];    // Turn layers that were in the intial Layer harness that have 3 underscores in the array OFF    for (var idx=0;idx<PSDlayerNamesGlobalArray.length;idx++) {        $.writeln("idx = "+idx);        $.writeln("PSDlayerNamesGlobalArray[idx]="+PSDlayerNamesGlobalArray[idx]);        $.writeln(".");        if (PSDlayerNamesGlobalArray[idx].split('_').length==3) {            $.writeln("PSDlayerNamesGlobalArray["+idx+"], is being turned off");            switchLayerVisibility(PSDlayerNamesGlobalArray[idx],"OFF");        }    }    }///////////////////////////////////////////////////////////////////////////////// selectLayer - Select a layer///////////////////////////////////////////////////////////////////////////////function selectLayer(layerNameSL) {    // B1_ProdName_Text         $.writeln("layer name="+layerNameSL);        // make sure LayerName Exists    var selectLayerCont=false;    selectLayerCont = findMatchInlayerNamesGlobalArray(layerNameSL);    if (selectLayerCont) {       // findMatchInlayerNamesGlobalArrayidx(nameToFind)        var idslct = charIDToTypeID( "slct" );        var desc13246 = new ActionDescriptor();        var idnull = charIDToTypeID( "null" );        var ref1601 = new ActionReference();        var idLyr = charIDToTypeID( "Lyr " );        //ref1601.putName( idLyr, "B1_ProdName_Text" );        ref1601.putName( idLyr, layerNameSL);        desc13246.putReference( idnull, ref1601 );        var idMkVs = charIDToTypeID( "MkVs" );        desc13246.putBoolean( idMkVs, false );        var idLyrI = charIDToTypeID( "LyrI" );        var list1606 = new ActionList();        list1606.putInteger( 11036 );        desc13246.putList( idLyrI, list1606 );        executeAction( idslct, desc13246, DialogModes.ALL );            $.writeln("layer name2="+layerNameSL);    }    return selectLayerCont;}///////////////////////////////////////////////////////////////////////////////// changeSpecialChar- change a text value///////////////////////////////////////////////////////////////////////////////function changeSpecialChar(textString,specialChar,replacementChar) {    // CSV file does not handle carridge return, so when the code finds a "~" it will substobute into Photoshop a new line.    $.writeln("textstring" + textString);    $.writeln("specialChar" + specialChar);    $.writeln("replacementChar" + replacementChar);        var newLineArray = textString.split(specialChar);     $.writeln("new lines length"+newLineArray.length);    if (newLineArray.length>0) {    var newString="";        for (var m = 0; m < newLineArray.length; m++)        {                    //        newString = newString + newLineArray[m]+replacementChar;            newString = newString + newLineArray[m];            if (m<newLineArray.length ) {                $.writeln(newLineArray[m]);                newString = newString +replacementChar;            }    }    } else {         newString = textString;    }        $.writeln("newString="+newString);        return newString.substr(0,newString.length-1);}///////////////////////////////////////////////////////////////////////////////// deSelectAllLayers()  - deselect all layers///////////////////////////////////////////////////////////////////////////////function deSelectAllLayers() {    var idselectNoLayers = stringIDToTypeID( "selectNoLayers" );    var desc369 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );    var ref17 = new ActionReference();    var idLyr = charIDToTypeID( "Lyr " );    var idOrdn = charIDToTypeID( "Ordn" );    var idTrgt = charIDToTypeID( "Trgt" );    ref17.putEnumerated( idLyr, idOrdn, idTrgt );    desc369.putReference( idnull, ref17 );    executeAction( idselectNoLayers, desc369, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////// setLayerOpacity -  set opactity of the layer///////////////////////////////////////////////////////////////////////////////function setLayerOpacity (oplayerName, opValue) {// set layer name             selectLayer(oplayerName);                 var idsetd = charIDToTypeID( "setd" );        var desc10 = new ActionDescriptor();        var idnull = charIDToTypeID( "null" );        var ref2 = new ActionReference();        var idLyr = charIDToTypeID( "Lyr " );        var idOrdn = charIDToTypeID( "Ordn" );        var idTrgt = charIDToTypeID( "Trgt" );        ref2.putEnumerated( idLyr, idOrdn, idTrgt );        desc10.putReference( idnull, ref2 );        var idT = charIDToTypeID( "T   " );        var desc11 = new ActionDescriptor();        var idOpct = charIDToTypeID( "Opct" );        var idPrc = charIDToTypeID( "#Prc" );        //        desc11.putUnitDouble( idOpct, idPrc, 75.000000 );        desc11.putUnitDouble( idOpct, idPrc, opValue);        var idLyr = charIDToTypeID( "Lyr " );        desc10.putObject( idT, idLyr, desc11 );        executeAction( idsetd, desc10, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////// setColourOverlay -  set colout overlay up for the selected layer///////////////////////////////////////////////////////////////////////////////function setColourOverlay(coLayerName, clr) {        // set layer name             selectLayer(coLayerName);         var r=0         var g=0         var b=0         if (clr=="white") {            var r=255            var g=255            var b=255         }         $.writeln("r="+r);         $.writeln("g="+g);         $.writeln("b="+b);                    var idsetd = charIDToTypeID( "setd" );        var desc374 = new ActionDescriptor();        var idnull = charIDToTypeID( "null" );        var ref45 = new ActionReference();        var idPrpr = charIDToTypeID( "Prpr" );        var idLefx = charIDToTypeID( "Lefx" );        ref45.putProperty( idPrpr, idLefx );        var idLyr = charIDToTypeID( "Lyr " );        var idOrdn = charIDToTypeID( "Ordn" );        var idTrgt = charIDToTypeID( "Trgt" );        ref45.putEnumerated( idLyr, idOrdn, idTrgt );        desc374.putReference( idnull, ref45 );        var idT = charIDToTypeID( "T   " );        var desc375 = new ActionDescriptor();        var idScl = charIDToTypeID( "Scl " );        var idPrc = charIDToTypeID( "#Prc" );        desc375.putUnitDouble( idScl, idPrc, 100.012504 );        var idSoFi = charIDToTypeID( "SoFi" );        var desc376 = new ActionDescriptor();        var idenab = charIDToTypeID( "enab" );        desc376.putBoolean( idenab, true );        var idpresent = stringIDToTypeID( "present" );        desc376.putBoolean( idpresent, true );        var idshowInDialog = stringIDToTypeID( "showInDialog" );        desc376.putBoolean( idshowInDialog, true );        var idMd = charIDToTypeID( "Md  " );        var idBlnM = charIDToTypeID( "BlnM" );        var idNrml = charIDToTypeID( "Nrml" );        desc376.putEnumerated( idMd, idBlnM, idNrml );        var idClr = charIDToTypeID( "Clr " );        var desc377 = new ActionDescriptor();        var idRd = charIDToTypeID( "Rd  " );        //  desc377.putDouble( idRd, 34.322958 );        desc377.putDouble( idRd, r );        var idGrn = charIDToTypeID( "Grn " );        //  desc377.putDouble( idGrn, 171.000005 );        desc377.putDouble( idGrn, g);        var idBl = charIDToTypeID( "Bl  " );        //    desc377.putDouble( idBl, 16.097276 );        desc377.putDouble( idBl, b );        var idRGBC = charIDToTypeID( "RGBC" );        desc376.putObject( idClr, idRGBC, desc377 );        var idOpct = charIDToTypeID( "Opct" );        var idPrc = charIDToTypeID( "#Prc" );        desc376.putUnitDouble( idOpct, idPrc, 100.000000 );        var idSoFi = charIDToTypeID( "SoFi" );        desc375.putObject( idSoFi, idSoFi, desc376 );        var idLefx = charIDToTypeID( "Lefx" );        desc374.putObject( idT, idLefx, desc375 );        executeAction( idsetd, desc374, DialogModes.NO );    }